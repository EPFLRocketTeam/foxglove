"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const commander_1 = __importStar(require("commander"));
const build_1 = require("./build");
const create_1 = require("./create");
const log_1 = require("./log");
const package_1 = require("./package");
function main(task) {
    task.catch(log_1.fatal);
}
module.exports = function (argv) {
    commander_1.default.usage("<command> [options]");
    commander_1.default
        .command("create <name>")
        .description("Create a new extension")
        .option("--cwd [cwd]", "Directory to create the extension in")
        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
        .action((name, { cwd }) => main(create_1.createCommand({ name, cwd })));
    commander_1.default
        .command("build")
        .description("Build an extension, preparing it for packaging or installation")
        .addOption(new commander_1.Option("--mode [mode]", "Build mode").choices(["development", "production"]))
        .option("--cwd [cwd]", "Directory to run the build command in")
        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
        .action(({ mode, cwd }) => main(build_1.buildCommand({ mode, cwd })));
    commander_1.default
        .command("package")
        .description("Packages an extension")
        .option("-o, --out [path]", "Output .foxe extension file to [path] location")
        .option("--cwd [cwd]", "Directory to run the package command in")
        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
        .action(({ out, cwd }) => main(package_1.packageCommand({ packagePath: out, cwd })));
    commander_1.default
        .command("install")
        .description("Locally installs an extension")
        .option("--cwd [cwd]", "Directory to run the install command in")
        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
        .action(({ cwd }) => main(package_1.installCommand({ cwd })));
    commander_1.default.on("command:*", ([_cmd]) => {
        commander_1.default.outputHelp({ error: true });
        process.exit(1);
    });
    commander_1.default.parse(argv);
};
//# sourceMappingURL=main.js.map