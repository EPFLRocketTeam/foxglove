"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createCommand = void 0;
const child_process_1 = require("child_process");
const fs_1 = require("fs");
const promises_1 = require("fs/promises");
const mkdirp_1 = __importDefault(require("mkdirp"));
const path = __importStar(require("path"));
const sanitize_filename_1 = __importDefault(require("sanitize-filename"));
const log_1 = require("./log");
const DEPENDENCIES = [
    "@foxglove/eslint-plugin",
    "@foxglove/fox",
    "@foxglove/studio",
    "@types/react",
    "@types/react-dom",
    "@typescript-eslint/eslint-plugin",
    "@typescript-eslint/parser",
    "eslint-config-prettier",
    "eslint-plugin-import",
    "eslint-plugin-prettier",
    "eslint-plugin-react-hooks",
    "eslint-plugin-react",
    "eslint",
    "prettier",
    "react",
    "react-dom",
    "typescript",
];
async function createCommand(options) {
    const name = options.name;
    if (name !== sanitize_filename_1.default(name)) {
        throw new Error(`Name "${name}" contains invalid characters. Choose a filename-compatible project name`);
    }
    const cwd = options.cwd ?? process.cwd();
    const templateDir = path.join(__dirname, "..", "template");
    const extensionDir = path.join(cwd, name);
    if (await exists(extensionDir)) {
        throw new Error(`Directory "${extensionDir}" already exists`);
    }
    const replacements = new Map([["${NAME}", name]]);
    const files = await listFiles(templateDir);
    for (const file of files) {
        const srcFile = path.resolve(templateDir, file);
        const dstFile = path.resolve(extensionDir, file);
        await copyTemplateFile(srcFile, dstFile, replacements);
    }
    await installDependencies(extensionDir, DEPENDENCIES);
    log_1.info(`Created Foxglove Studio extension "${name}" at ${extensionDir}`);
}
exports.createCommand = createCommand;
async function exists(filename) {
    try {
        await promises_1.access(filename, fs_1.constants.F_OK);
        return true;
    }
    catch {
        return false;
    }
}
async function listFiles(baseDir, curDir) {
    let output = [];
    curDir ?? (curDir = baseDir);
    const contents = await promises_1.readdir(curDir, { withFileTypes: true });
    for (const entry of contents) {
        if (entry.isDirectory()) {
            output = output.concat(await listFiles(baseDir, path.join(curDir, entry.name)));
        }
        else if (entry.isFile()) {
            output.push(path.relative(baseDir, path.join(curDir, entry.name)));
        }
    }
    return output;
}
async function copyTemplateFile(src, dst, replacements) {
    log_1.info(`creating ${dst}`);
    let contents = await promises_1.readFile(src, { encoding: "utf8" });
    for (const [search, replacement] of replacements.entries()) {
        const regex = new RegExp(search.replace(/[-/\\^$*+?.()|[\]{}]/g, "\\$&"), "g");
        contents = contents.replace(regex, replacement);
    }
    await mkdirp_1.default(path.dirname(dst));
    await promises_1.writeFile(dst, contents);
}
async function installDependencies(extensionDir, deps) {
    const command = "yarnpkg";
    const args = ["add", "--exact", "--cwd", extensionDir, "--dev", ...deps];
    log_1.info(`${command} ${args.join(" ")}`);
    await new Promise((resolve, reject) => {
        const child = child_process_1.spawn(command, args, {
            shell: true,
            stdio: "inherit",
            env: { ...process.env },
        });
        child.on("close", (code) => {
            if (code !== 0) {
                return reject(new Error(`yarnpkg exited with code ${code ?? "<null>"}`));
            }
            resolve();
        });
    });
}
//# sourceMappingURL=create.js.map