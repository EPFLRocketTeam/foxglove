"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const clean_webpack_plugin_1 = require("clean-webpack-plugin");
const path = __importStar(require("path"));
exports.default = (extensionPath, entryPoint, env) => {
    extensionPath = path.resolve(extensionPath);
    const isDev = env == undefined || env === "development";
    const configFile = path.join(extensionPath, "tsconfig.json");
    const config = {
        target: "web",
        mode: isDev ? "development" : "production",
        context: extensionPath,
        entry: entryPoint,
        output: {
            path: path.join(extensionPath, "dist"),
            filename: "extension.js",
            libraryTarget: "commonjs2",
        },
        devtool: isDev ? "eval-source-map" : "source-map",
        externals: {
            "@foxglove/studio": "@foxglove/studio",
        },
        resolve: {
            extensions: [".js", ".ts", ".jsx", ".tsx"],
        },
        module: {
            rules: [
                {
                    test: /\.tsx?$/,
                    exclude: /node_modules/,
                    use: [
                        {
                            loader: "ts-loader",
                            options: {
                                configFile,
                            },
                        },
                    ],
                },
            ],
        },
        plugins: [new clean_webpack_plugin_1.CleanWebpackPlugin()],
    };
    return config;
};
//# sourceMappingURL=webpackConfigExtension.js.map